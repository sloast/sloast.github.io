import{t as p,a as m,c as T,d as S}from"../chunks/DbVJFTkT.js";import"../chunks/D2C0XxB-.js";import{h as U,am as d,t as A,m as I,q as w,au as R,an as c,ao as f,al as x,av as _}from"../chunks/adigBlXe.js";import{s as F,d as W,e as q}from"../chunks/B18aiWv2.js";import{i as B}from"../chunks/C_7O0sr3.js";import{s as $}from"../chunks/Dl36ZYWM.js";import{p as b}from"../chunks/oeiUHovP.js";function D(t,e){return t==null?null:String(t)}function E(t,e,r,s){var i=t.__style;if(U||i!==e){var n=D(e);(!U||n!==t.getAttribute("style"))&&(n==null?t.removeAttribute("style"):t.style.cssText=n),t.__style=e}return s}var H=p('<div class="flex items-center justify-center relative min-h-72 overflow-clip z-0"><h1 class="bg-gray-800 rounded p-4 pointer-events-none z-10 text-5xl"> </h1> <div id="background" class="inset-0 my-[-50px] absolute"><iframe src="https://www.shadertoy.com/embed/XfdSRs?gui=false&amp;t=10&amp;paused=false&amp;muted=true" width="100%" height="100%" frameborder="0" title="3dperlinnoise" class="inset-0"></iframe></div></div>');function K(t){let e=R(""),r="adam robson",s=R("_");function i(){I(e,w(e)+r[0]),r=r.substring(1),r.length===0&&(clearInterval(n),setInterval(()=>{I(s,w(s)=="_"?" ":"_")},1e3))}let n=0;setTimeout(()=>{n=setInterval(i,100)},200);var h=H(),o=d(h),l=d(o);c(o);var a=f(o,2),u=d(a);u.allowFullscreen=!1,c(a),c(h),A(()=>F(l,` ${w(e)??""}${w(s)??""}`)),m(t,h)}var X=(t,e)=>{window.location.href=e()},Z=p('<button class="group relative z-0 flex min-h-60 flex-col justify-stretch overflow-clip rounded-xl border-2 border-gray-400 bg-gray-900 transition-all duration-500 hover:z-10 hover:shadow-[0_0_2em_#008236] md:w-80"><div class="grow-0 bg-gray-900 py-1 text-center align-middle"><h2 class="text-2xl font-semibold"> </h2></div>  <div class="relative flex grow flex-col items-stretch justify-end overflow-clip rounded-xl bg-gray-800 bg-cover bg-center bg-no-repeat"><!> <div class="grow-0 bg-black/25 p-4 backdrop-blur-sm transition-all duration-200 ease-out group-hover:translate-y-0 md:translate-y-full"><!></div></div></button>');function y(t,e){let r=b(e,"background_image",3,null);b(e,"image",3,null);let s=b(e,"href",3,null),i=b(e,"backdrop",3,null),n=b(e,"bg_style",3,"");const h=v=>`url('${v.replaceAll("\\","/")}')`;var o=Z();o.__click=[X,s];var l=d(o),a=d(l),u=d(a,!0);c(a),c(l);var g=f(l,2),k=d(g);{var L=v=>{var z=T(),P=x(z);$(P,i),m(v,z)};B(k,v=>{i()&&v(L)})}var j=f(k,2),C=d(j);$(C,()=>e.desc),c(j),c(g),c(o),A(v=>{F(u,e.title),E(g,v)},[()=>(r()?`background-image: ${h(r())};`:"")+n()]),q("auxclick",o,v=>{v.button===1&&window.open(s())}),m(t,o)}W(["click"]);const G=""+new URL("../assets/cubu_disk2.CWzxzUuK.png",import.meta.url).href,J=""+new URL("../assets/derail.hwraH52e.png",import.meta.url).href,M=""+new URL("../assets/snake.DnPEjFZi.png",import.meta.url).href;var N=p(`shader art is code that runs on your gpu to generate dynamic, interactive digital art.
			examples are the visuals above and right here. i've written a few on <a href="https://www.shadertoy.com/" class="a">shadertoy</a>.`,1),O=p('<div id="background" class="pointer-events-none absolute inset-0 my-[-50px]"><iframe src="https://www.shadertoy.com/embed/lfdSWS?gui=false&amp;t=10&amp;paused=false&amp;muted=true" width="100%" height="100%" frameborder="0" title="3dperlinnoise" class="inset-0"></iframe></div>'),Q=p(`<p><a class="a" href="https://www.derailvalley.com/">derail valley</a> is a train simulation game by <a class="a" href="https://www.altfuture.gg/">altfuture</a>. my derail valley mods are
				available on <a class="a" href="https://github.com/sloast/">github</a> and <a class="a" href="https://next.nexusmods.com/profile/sloast/mods">nexus</a>.</p>`),V=p('<h2 class="pt-8 text-3xl font-semibold">recent projects</h2> <h3 class="text-l font-semibold text-gray-500">hover for more info, and click to see the full thing</h3> <div class="flex flex-col items-stretch justify-center gap-4 py-4 md:flex-row md:flex-wrap"><!> <!> <!> <!></div>',1);function Y(t){var e=V(),r=f(x(e),4),s=d(r);y(s,{title:"cubu",href:"/cubu",background_image:G,desc:l=>{_();var a=S(`a project to create a unix-compatible block device where all the data is stored on rubik's
			cubes. also has an interactive cube solver.`);m(l,a)},$$slots:{desc:!0}});var i=f(s,2);y(i,{title:"shader art",href:"https://www.shadertoy.com/profile/?show=shaders",desc:a=>{_();var u=N();_(2),m(a,u)},backdrop:a=>{var u=O(),g=d(u);g.allowFullscreen=!1,c(u),m(a,u)},$$slots:{desc:!0,backdrop:!0}});var n=f(i,2);y(n,{title:"snake",href:"/snake",background_image:M,desc:l=>{_();var a=S("a little webgl snake game");m(l,a)},$$slots:{desc:!0}});var h=f(n,2);y(h,{title:"derail valley mods",href:"https://next.nexusmods.com/profile/sloast/mods",background_image:J,bg_style:"background-position:top;",desc:l=>{var a=Q();m(l,a)},$$slots:{desc:!0}}),c(r),m(t,e)}var ee=p(`<!> <main class="pt-4"><p>welcome to my site. it's a bit empty at the moment, but i'm working on it :)</p> <!></main>`,1);function ne(t){var e=ee(),r=x(e);K(r);var s=f(r,2),i=f(d(s),2);Y(i),c(s),m(t,e)}export{ne as component};
